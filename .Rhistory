# Levantine Aurignacian
road_query_culture('Levantine Aurignacian') %>%
wiki_json(commons_description = '{"de": "Ausgewählte Fundstellen des levante-Aurignacien aus der ROAD Datenbank", "en": "Selected Levantine Aurignacian sites from the ROAD Database"}') %>%
writeLines("output/Levantine Aurignacian.json")
# Micoquian
road_query_culture('Micoquian') %>%
wiki_json(commons_description = '{"de": "Ausgewählte Micoquien Fundstellen aus der ROAD Datenbank", "en": "Selected Micoquian sites from the ROAD Database"}') %>%
writeLines("output/Micoquian.json")
# Mousterian
road_query_culture('%Mousterian%') %>%
wiki_json(commons_description = '{"en": "Selected Mousterian sites from the ROAD Database"}') %>%
writeLines("output/Mousterian.json")
# Proto-Aurignacian
road_query_culture('Proto-Aurignacian') %>%
wiki_json(commons_description = '{"de": "Ausgewählte Proto-Aurignacien Fundstellen aus der ROAD Datenbank", "en": "Selected Proto-Aurignacian sites from the ROAD Database"}') %>%
writeLines("output/Proto-Aurignacian.json")
# Solutrean
road_query_culture('Solutrean') %>%
wiki_json(commons_description = '{"de": "Ausgewählte Solutréen Fundstellen aus der ROAD Datenbank", "en": "Selected Solutrean sites from the ROAD Database"}') %>%
writeLines("output/Solutrean.json")
# Still Bay
road_query_culture('Still Bay') %>%
wiki_json(commons_description = '{"de": "Ausgewählte Still Bay Fundstellen aus der ROAD Datenbank", "en": "Selected Still Bay sites from the ROAD Database"}') %>%
writeLines("output/Still Bay.json")
# Uluzzian
road_query_culture('Uluzzian') %>%
wiki_json(commons_description = '{"de": "Ausgewählte Uluzzien Fundstellen aus der ROAD Datenbank", "en": "Selected Uluzzian sites from the ROAD Database"}') %>%
writeLines("output/Uluzzian.json")
# Early fire use
read_excel('input/Early fire.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected sites with early human fire use from the ROAD Database"}') %>%
writeLines("output/Early fire.json")
# Ochre use
read_excel('input/Ochre.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected sites with early human ochre use in Africa from the ROAD Database"}') %>%
writeLines("output/Ochre.json")
# Eyed needle
read_excel('input/Eyed needle.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected sites with early human use of eyed needles from the ROAD Database"}') %>%
writeLines("output/Eyed needles.json")
# Sahelanthropus tchadensis
read_excel('input/Sahelanthropus tchadensis.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Sahelanthropus tchadensis sites from the ROAD Database"}') %>%
writeLines("output/Sahelanthropus tchadensis.json")
# Ardipithecus ramidus and kadaba
read_excel('input/Ardipithecus ramidus and kadaba.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Ardipithecus ramidus and A. kadaba sites from the ROAD Database"}') %>%
writeLines("output/Ardipithecus ramidus and kadaba.json")
# Australopithecus afarensis
read_excel('input/Australopithecus afarensis.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Australopithecus afarensis sites from the ROAD Database"}') %>%
writeLines("output/Australopithecus afarensis.json")
# Australopithecus africanus
read_excel('input/Australopithecus africanus.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Australopithecus africanus sites from the ROAD Database"}') %>%
writeLines("output/Australopithecus africanus.json")
# Paranthropus boisei
read_excel('input/Paranthropus boisei.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Paranthropus boisei sites from the ROAD Database"}') %>%
writeLines("output/Paranthropus boisei.json")
# Homo rudolfensis
read_excel('input/Homo rudolfensis.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Homo rudolfensis sites from the ROAD Database"}') %>%
writeLines("output/Homo rudolfensis.json")
# Homo habilis
read_excel('input/Homo habilis.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Homo habilis sites from the ROAD Database"}') %>%
writeLines("output/Homo habilis.json")
# Homo erectus
read_excel('input/Homo erectus.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Homo erectus sites from the ROAD Database"}') %>%
writeLines("output/Homo erectus.json")
# Homo ergaster
read_excel('input/Homo ergaster.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Homo ergaster sites from the ROAD Database"}') %>%
writeLines("output/Homo ergaster.json")
# Homo heidelbergensis
read_excel('input/Homo heidelbergensis.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Homo heidelbergensis sites from the ROAD Database"}') %>%
writeLines("output/Homo heidelbergensis.json")
# Homo sapiens neanderthalensis
read_excel('input/Homo sapiens neanderthalensis.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Homo sapiens neanderthalensis sites from the ROAD Database"}') %>%
writeLines("output/Homo sapiens neanderthalensis.json")
# Homo sapiens
read_excel('input/Homo sapiens.xlsx') %>% road_query_table(desc=T) %>%
wiki_json(commons_description = '{"en": "Selected Homo sapiens sites from the ROAD Database"}') %>%
writeLines("output/Homo sapiens.json")
library(tidyverse)
library(sf)
library(RPostgreSQL)
library(RPostgres)
library(jsonlite)
library(lubridate)
library(geojsonsf)
library(readxl)
# Connect to ROAD
con <- dbConnect(RPostgres::Postgres(), dbname = "roceeh", host="134.2.216.14", port=5432, user=rstudioapi::askForPassword("Database username"), password=rstudioapi::askForPassword("Database password"))
road_query_table <- function(table, desc=F, color='1e3283', size='small'){
dat <- table %>% na.omit()
dat <- dat %>% arrange(title)
# Append ROAD Summary Data Sheet link
if(desc==T){
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"))
}
dat <- dat %>%  mutate( "marker-color" = color, "marker-size" = size)
return(dat)
}
wiki_json <- function(df, commons_description = ' ') {
# Head of JSON
commons_license <- "CC-BY-SA-4.0"
commons_source <- paste0("Data retrieved from the [https://www.roceeh.uni-tuebingen.de/roadweb ROCEEH Out Of Africa Database (ROAD)] on ", Sys.Date(), ".")
# Geodata JSON
df$lon <- round(df$lon, 3)
df$lat <- round(df$lat, 3)
# Create the spatial object using sf
gdf <- st_as_sf(df, coords = c("lon", "lat"), crs = 4326)
geojson <- sf_geojson(gdf)
#geojson <- st_as_text(gdf)
#geojson <- st_as_text(st_geometry(gdf))
geojson <- fromJSON(geojson)
# Add CRS to geojson
geojson$crs <- list(
type = "name",
properties = list(
name = "urn:ogc:def:crs:OGC:1.3:CRS84"
)
)
# Merge head and geodata
wikidict <- list(
license = commons_license,
description = fromJSON(commons_description),
sources = commons_source,
data = geojson
)
# Convert to JSON string
wikistring <- toJSON(wikidict, pretty = TRUE, auto_unbox = TRUE, na = "null")
return(wikistring)
}
# Ochre use
read_excel('input/Ochre.xlsx') %>% road_query_table(desc=T, color='CC7722') %>%
wiki_json(commons_description = '{"en": "Selected sites with early human ochre use in Africa from the ROAD Database"}') %>%
writeLines("output/Ochre.json")
# Early fire use
read_excel('input/Early fire.xlsx') %>% road_query_table(desc=T, color='C8503B') %>%
wiki_json(commons_description = '{"en": "Selected sites with early human fire use from the ROAD Database"}') %>%
writeLines("output/Early fire.json")
# Early fire use
read_excel('input/Early fire.xlsx') %>% road_query_table(desc=T, color='f73718') %>%
wiki_json(commons_description = '{"en": "Selected sites with early human fire use from the ROAD Database"}') %>%
writeLines("output/Early fire.json")
library(tidyverse)
library(sf)
library(RPostgreSQL)
library(RPostgres)
library(jsonlite)
library(lubridate)
library(geojsonsf)
library(readxl)
# Connect to ROAD
con <- dbConnect(RPostgres::Postgres(), dbname = "roceeh", host="134.2.216.14", port=5432, user=rstudioapi::askForPassword("Database username"), password=rstudioapi::askForPassword("Database password"))
# Query function
road_query_culture <- function(culture, color='1e3283', size='small'){
# Prepare query
if(exists('culture')){
# Load sql query template
query_culture <- "SELECT DISTINCT on (archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y) archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y FROM archaeological_layer, locality WHERE (locality.idlocality = archaeological_layer.locality_idlocality and archaeological_layer.archstratigraphy_idarchstrat like '%s')"
# Integrate query
query <- sprintf(query_culture, culture)
}
# Run the query
dat <- dbGetQuery(con, query)
# Rename columns
dat <- dat %>%
rename(lon = x,
lat = y,
title = locality_idlocality) %>%
select(-archstratigraphy_idarchstrat) %>%
arrange(title)
# Add link to ROAD Summary Data Sheets
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"),
"marker-color" = color,
"marker-size" = size)
return(dat)
}
road_query_period <- function(period){
# Prepare query
if(exists('period')){
# Load sql query template
query_period <- "SELECT DISTINCT on (locality.idlocality, locality.x, locality.y) locality.idlocality, locality.x, locality.y FROM archaeological_layer, archaeological_stratigraphy, assemblage, locality WHERE (assemblage.locality_idlocality = locality.idlocality and archaeological_layer.locality_idlocality = assemblage.locality_idlocality and archaeological_stratigraphy.idarchstrat = archaeological_layer.archstratigraphy_idarchstrat and archaeological_stratigraphy.cultural_period like '%s')"
# Integrate query
query <- sprintf(query_period, period)
}
# Run the query
dat <- dbGetQuery(con, query)
# Rename columns
dat <- dat %>%
rename(lon = x,
lat = y,
title = idlocality) %>%
arrange(title)
# Add link to ROAD Summary Data Sheets
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"),
"marker-color" = '1e3283',
"marker-size" = 'small')
return(dat)
}
road_query_table <- function(table, desc=F, color='1e3283', size='small'){
dat <- table %>% na.omit()
dat <- dat %>% arrange(title)
# Append ROAD Summary Data Sheet link
if(desc==T){
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"))
}
dat <- dat %>%  mutate( "marker-color" = color, "marker-size" = size)
return(dat)
}
wiki_json <- function(df, commons_description = ' ') {
# Head of JSON
commons_license <- "CC-BY-SA-4.0"
commons_source <- paste0("Data retrieved from the [https://www.roceeh.uni-tuebingen.de/roadweb ROCEEH Out Of Africa Database (ROAD)] on ", Sys.Date(), ".")
# Geodata JSON
df$lon <- round(df$lon, 3)
df$lat <- round(df$lat, 3)
# Create the spatial object using sf
gdf <- st_as_sf(df, coords = c("lon", "lat"), crs = 4326)
geojson <- sf_geojson(gdf)
#geojson <- st_as_text(gdf)
#geojson <- st_as_text(st_geometry(gdf))
geojson <- fromJSON(geojson)
# Add CRS to geojson
geojson$crs <- list(
type = "name",
properties = list(
name = "urn:ogc:def:crs:OGC:1.3:CRS84"
)
)
# Merge head and geodata
wikidict <- list(
license = commons_license,
description = fromJSON(commons_description),
sources = commons_source,
data = geojson
)
# Convert to JSON string
wikistring <- toJSON(wikidict, pretty = TRUE, auto_unbox = TRUE, na = "null")
return(wikistring)
}
# Acheulean
road_query_culture('%Acheule%') #%>%
# Acheulean
road_query_culture('%Acheule%') %>% nrow()
road_query_culture('Acheul(?!o-Yabrudian|ean Tradition)') %>% nrow()
road_query_culture('%Acheul(?!o-Yabrudian|ean Tradition)') %>% nrow()
road_query_culture('%Acheul(?!o-Yabrudian|ean Tradition)%') %>% nrow()
road_query_culture(~'%Acheul(?!o-Yabrudian|ean Tradition)%') %>% nrow()
road_query_string <- function(sql_string, color='1e3283', size='small'){
# Prepare query
if(exists('sql_string')){
# Load sql query template
query_culture <- sql_string
# Integrate query
query <- sprintf(query_culture, culture)
}
# Run the query
dat <- dbGetQuery(con, query)
# Rename columns
dat <- dat %>%
rename(lon = x,
lat = y,
title = locality_idlocality) %>%
select(-archstratigraphy_idarchstrat) %>%
arrange(title)
# Add link to ROAD Summary Data Sheets
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"),
"marker-color" = color,
"marker-size" = size)
return(dat)
}
road_query_string("SELECT DISTINCT on (archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y) archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y FROM archaeological_layer, locality WHERE (locality.idlocality = archaeological_layer.locality_idlocality and archaeological_layer.archstratigraphy_idarchstrat like '%Acheul%'
AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Mousterian of Acheulean Tradition%'
AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Acheulo-Yabrudian%'") %>% nrow()
road_query_string <- function(sql_string, color='1e3283', size='small'){
# Prepare query
if(exists('sql_string')){
# Load sql query template
#query_culture <- sql_string
# Integrate query
#query <- sprintf(sql_string)
query <- sql_query
}
# Run the query
dat <- dbGetQuery(con, query)
# Rename columns
dat <- dat %>%
rename(lon = x,
lat = y,
title = locality_idlocality) %>%
select(-archstratigraphy_idarchstrat) %>%
arrange(title)
# Add link to ROAD Summary Data Sheets
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"),
"marker-color" = color,
"marker-size" = size)
return(dat)
}
road_query_string("SELECT DISTINCT on (archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y) archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y FROM archaeological_layer, locality WHERE (locality.idlocality = archaeological_layer.locality_idlocality and archaeological_layer.archstratigraphy_idarchstrat like '%Acheul%'
AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Mousterian of Acheulean Tradition%'
AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Acheulo-Yabrudian%'") %>% nrow()
road_query_string <- function(sql_string, color='1e3283', size='small'){
# Prepare query
if(exists('sql_string')){
# Load sql query template
#query_culture <- sql_string
# Integrate query
#query <- sprintf(sql_string)
query <- sql_string
}
# Run the query
dat <- dbGetQuery(con, query)
# Rename columns
dat <- dat %>%
rename(lon = x,
lat = y,
title = locality_idlocality) %>%
select(-archstratigraphy_idarchstrat) %>%
arrange(title)
# Add link to ROAD Summary Data Sheets
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"),
"marker-color" = color,
"marker-size" = size)
return(dat)
}
road_query_string("SELECT DISTINCT on (archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y) archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y FROM archaeological_layer, locality WHERE (locality.idlocality = archaeological_layer.locality_idlocality and archaeological_layer.archstratigraphy_idarchstrat like '%Acheul%'
AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Mousterian of Acheulean Tradition%'
AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Acheulo-Yabrudian%'") %>% nrow()
# Connect to ROAD
con <- dbConnect(RPostgres::Postgres(), dbname = "roceeh", host="134.2.216.14", port=5432, user=rstudioapi::askForPassword("Database username"), password=rstudioapi::askForPassword("Database password"))
road_query_string("SELECT DISTINCT on (archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y) archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y FROM archaeological_layer, locality WHERE (locality.idlocality = archaeological_layer.locality_idlocality and archaeological_layer.archstratigraphy_idarchstrat like '%Acheul%'
AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Mousterian of Acheulean Tradition%'
AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Acheulo-Yabrudian%'") %>% nrow()
road_query_string("SELECT DISTINCT ON (archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y) archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y FROM archaeological_layer, locality WHERE locality.idlocality = archaeological_layer.locality_idlocality AND archaeological_layer.archstratigraphy_idarchstrat LIKE '%Acheul%' AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Mousterian of Acheulean Tradition%' AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Acheulo-Yabrudian%'") %>% nrow()
# Acheulean
road_query_culture('%Acheule%') %>% nrow()
road_query_string("SELECT DISTINCT ON (archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y) archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y FROM archaeological_layer, locality WHERE locality.idlocality = archaeological_layer.locality_idlocality AND archaeological_layer.archstratigraphy_idarchstrat LIKE '%Acheul%' AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Mousterian of Acheulean Tradition%' AND archaeological_layer.archstratigraphy_idarchstrat NOT LIKE '%Acheulo-Yabrudian%'") %>%
wiki_json(commons_description = '{"en": "Selected Acheulean sites from the ROAD Database"}') %>%
writeLines("output/Acheulean.json")
library(tidyverse)
library(sf)
library(RPostgreSQL)
library(RPostgres)
library(jsonlite)
library(lubridate)
library(geojsonsf)
library(readxl)
# Connect to ROAD
con <- dbConnect(RPostgres::Postgres(), dbname = "roceeh", host="134.2.216.14", port=5432, user=rstudioapi::askForPassword("Database username"), password=rstudioapi::askForPassword("Database password"))
# Query function
road_query_culture <- function(culture, color='1e3283', size='small'){
# Prepare query
if(exists('culture')){
# Load sql query template
query_culture <- "SELECT DISTINCT on (archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y) archaeological_layer.locality_idlocality, archaeological_layer.archstratigraphy_idarchstrat, locality.x, locality.y FROM archaeological_layer, locality WHERE (locality.idlocality = archaeological_layer.locality_idlocality and archaeological_layer.archstratigraphy_idarchstrat like '%s')"
# Integrate query
query <- sprintf(query_culture, culture)
}
# Run the query
dat <- dbGetQuery(con, query)
# Rename columns
dat <- dat %>%
rename(lon = x,
lat = y,
title = locality_idlocality) %>%
select(-archstratigraphy_idarchstrat) %>%
arrange(title)
# Add link to ROAD Summary Data Sheets
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"),
"marker-color" = color,
"marker-size" = size)
return(dat)
}
road_query_period <- function(period){
# Prepare query
if(exists('period')){
# Load sql query template
query_period <- "SELECT DISTINCT on (locality.idlocality, locality.x, locality.y) locality.idlocality, locality.x, locality.y FROM archaeological_layer, archaeological_stratigraphy, assemblage, locality WHERE (assemblage.locality_idlocality = locality.idlocality and archaeological_layer.locality_idlocality = assemblage.locality_idlocality and archaeological_stratigraphy.idarchstrat = archaeological_layer.archstratigraphy_idarchstrat and archaeological_stratigraphy.cultural_period like '%s')"
# Integrate query
query <- sprintf(query_period, period)
}
# Run the query
dat <- dbGetQuery(con, query)
# Rename columns
dat <- dat %>%
rename(lon = x,
lat = y,
title = idlocality) %>%
arrange(title)
# Add link to ROAD Summary Data Sheets
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"),
"marker-color" = '1e3283',
"marker-size" = 'small')
return(dat)
}
road_query_string <- function(sql_string, color='1e3283', size='small'){
# Prepare query
if(exists('sql_string')){
# Load sql query template
#query_culture <- sql_string
# Integrate query
#query <- sprintf(sql_string)
query <- sql_string
}
# Run the query
dat <- dbGetQuery(con, query)
if('idlocality' %in% colnames(dat)){
dat <- dat %>%  rename('locality_idlocality'='idlocality')
}
# Rename columns
dat <- dat %>%
rename(lon = x,
lat = y,
title = locality_idlocality) %>%
select(title,lon,lat) %>%
arrange(title)
# Add link to ROAD Summary Data Sheets
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"),
"marker-color" = color,
"marker-size" = size)
return(dat)
}
road_query_table <- function(table, desc=F, color='1e3283', size='small'){
dat <- table %>% na.omit()
dat <- dat %>% arrange(title)
# Append ROAD Summary Data Sheet link
if(desc==T){
dat <- dat %>%
mutate(description = paste0("[https://www.roceeh.uni-tuebingen.de/roadweb/tcpdf/localityInfoPDF/localityInfoPDF.php?locality=",
str_replace_all(title, " " ,"%20"),
" Summary Data Sheet]"))
}
dat <- dat %>%  mutate( "marker-color" = color, "marker-size" = size)
return(dat)
}
wiki_json <- function(df, commons_description = ' ') {
# Head of JSON
commons_license <- "CC-BY-SA-4.0"
commons_source <- paste0("Data retrieved from the [https://www.roceeh.uni-tuebingen.de/roadweb ROCEEH Out Of Africa Database (ROAD)] on ", Sys.Date(), ".")
# Geodata JSON
df$lon <- round(df$lon, 3)
df$lat <- round(df$lat, 3)
# Create the spatial object using sf
gdf <- st_as_sf(df, coords = c("lon", "lat"), crs = 4326)
geojson <- sf_geojson(gdf)
#geojson <- st_as_text(gdf)
#geojson <- st_as_text(st_geometry(gdf))
geojson <- fromJSON(geojson)
# Add CRS to geojson
geojson$crs <- list(
type = "name",
properties = list(
name = "urn:ogc:def:crs:OGC:1.3:CRS84"
)
)
# Merge head and geodata
wikidict <- list(
license = commons_license,
description = fromJSON(commons_description),
sources = commons_source,
data = geojson
)
# Convert to JSON string
wikistring <- toJSON(wikidict, pretty = TRUE, auto_unbox = TRUE, na = "null")
return(wikistring)
}
# Paranthropus
road_query_string("SELECT DISTINCT on (locality.idlocality, locality.x, locality.y) locality.idlocality, locality.x, locality.y FROM locality, publication_desc_humanremains WHERE (publication_desc_humanremains.humanremains_idlocality = locality.idlocality and publication_desc_humanremains.genus = 'Paranthropus' and (publication_desc_humanremains.roceeh_default is NULL or publication_desc_humanremains.roceeh_default = 't'))") %>%
wiki_json(commons_description = '{"en": "Selected Paranthropus sites from the ROAD Database"}') %>%
writeLines("output/Paranthropus.json")
# Paranthropus
road_query_string("SELECT DISTINCT on (locality.idlocality, locality.x, locality.y) locality.idlocality, locality.x, locality.y FROM locality, publication_desc_humanremains WHERE (publication_desc_humanremains.humanremains_idlocality = locality.idlocality and publication_desc_humanremains.genus = 'Paranthropus' and publication_desc_humanremains.roceeh_default is NULL)") #%>%
# Paranthropus
road_query_string("SELECT DISTINCT on (locality.idlocality, locality.x, locality.y) locality.idlocality, locality.x, locality.y FROM locality, publication_desc_humanremains WHERE (publication_desc_humanremains.humanremains_idlocality = locality.idlocality and publication_desc_humanremains.genus = 'Paranthropus' and (publication_desc_humanremains.roceeh_default is NULL or publication_desc_humanremains.roceeh_default = 't'))") #%>%
